#!/usr/bin/env python

from terrascript import Terrascript, provider
from terrascript.vsphere.r import vsphere_virtual_machine
from terrascript.vsphere.d import vsphere_datastore
from terrascript.vsphere.d import vsphere_datacenter
from terrascript.vsphere.d import vsphere_resource_pool
from terrascript.vsphere.d import vsphere_network
from terrascript.vsphere.d import vsphere_virtual_machine \
    as data_vsphere_virtual_machine

from python_terraform import *

import argparse
import socket
from os import environ
import subprocess
import logging


from os.path import exists, join, normpath
from os import pathsep, linesep

class TerrascriptVSphereVM:
    def __init__(self, name, guestid, cpu, memory, folder = ''):
        self.ts = Terrascript()
        self.name = name
        self.guestid = guestid
        self.cpu = cpu
        self.memory = memory
        self.folder = folder
        self.provider = None
        self.datacenter = None
        self.datastore = None
        self.template = None
        self.gateway = None
        self.disks = []
        self.networks = []
        self.interfaces = []
        self.iface_customization = []
        self.dns = []

    
    def setProvider(self, host, username , password):
        self.provider = provider(
            "vsphere",
            user=username,
            password=password,
            vsphere_server=host,
            allow_unverified_ssl=True)
        self.ts.add(self.provider)
    
    
    def setDatacenter(self, datacenter):
        self.datacenter = vsphere_datacenter(
            "dc",
            name=datacenter)
        self.ts.add(self.datacenter)


    def setDatastore(self, datastore):
        if not self.datacenter:
            raise Exception
        else:
            self.datastore = vsphere_datastore(
            "ds",
            name = datastore,
            datacenter_id = self.datacenter.id)
            self.ts.add(self.datastore)

    def setResourcePool(self, pool):
        if not self.datacenter:
            raise Exception
        else:
            self.pool = vsphere_resource_pool(
            "pool",
            name = pool,
            datacenter_id=self.datacenter.id)
            self.ts.add(self.pool)

    def setTemplate(self, template):
        if not self.datacenter:
            raise Exception
        else:
            self.template = data_vsphere_virtual_machine(
            "template",
            name=template,
            datacenter_id=self.datacenter.id)
            self.ts.add(self.template)

    def addDisk(self, size):
        idx = len(self.disks)
        self.disks.append({"label": "disk{}".format(idx+1), "size": size})


    def addNetworkInterface(self, dvp, ipaddr, cidr):
        if not self.datacenter:
            raise Exception
        else:
            vnet = vsphere_network(
                dvp,
                name=dvp,
                datacenter_id=self.datacenter.id)
            self.networks.append(vnet)
            self.ts.add(vnet)
            self.interfaces.append({"network_id": vnet.id})
            self.iface_customization.append({"ipv4_address": ipaddr,
                "ipv4_netmask": cidr})

    
    def setDomain(self, domain):
        self.domain = domain
    

    def setTimezone(self, timezone):
        self.timezone = timezone


    def setGateway(self, gateway):
        self.gateway = gateway

    def addDns(self, dns):
        self.dns.append(dns)


    def saveConfiguration(self, filename):
        linuxOptions = {}
        linuxOptions["host_name"] = self.name
        linuxOptions["domain"] = self.domain
        linuxOptions["time_zone"] = self.timezone
        
        customize = {}
        customize["linux_options"] = linuxOptions
        customize["network_interface"] = self.iface_customization
        customize["ipv4_gateway"] = self.gateway
        customize["dns_server_list"] = self.dns

        clone = {}
        clone["template_uuid"] = self.template.id
        clone["linked_clone"] = False
        clone["customize"] = customize

        if self.folder != '':
            self.virtualMachine = vsphere_virtual_machine(
                'vm',
                name=self.name,
                resource_pool_id=self.pool.id,
                datastore_id=self.datastore.id,
                guest_id=self.guestid,
                folder=self.folder,
                num_cpus=self.cpu,
                memory=self.memory,
                network_interface=self.interfaces,
                disk=self.disks,
                clone=clone)
        else:
            self.virtualMachine = vsphere_virtual_machine(
                'vm',
                name=self.name,
                resource_pool_id=self.pool.id,
                datastore_id=self.datastore.id,
                guest_id=self.guestid,
                num_cpus=self.cpu,
                memory=self.memory,
                network_interface=self.interfaces,
                disk=self.disks,
                clone=clone)
        self.ts.add(self.virtualMachine)
        fd = open(filename,'w')
        fd.writelines(self.ts.dump())
        fd.close()
        return 0


class TerraformVM:
    def __init__(self):
        find_file = self.__search_file('terraform',environ['PATH'])
        if not find_file:
            raise Exception

        self.terraform = Terraform()
        self.tfstateFile = 'terraform.tfstate'
        self.tfstate = None
        try:
            fd = open(self.tfstateFile, 'r')
            self.tfstate = json.load(fd)
            fd.close()
        except FileNotFoundError:
            pass

        self.VmResources = {}


    def __search_file(self, filename, search_path):
        logger = logging.getLogger()
        file_found = 0
        paths = str.split(search_path, pathsep)
        for path in paths:
            if exists(join(path, filename)):
                file_found = 1
                break
        if file_found:
            logger.info("{} found at {}".format(filename, normpath(join(path, filename))))
            return True
        else:
            logger.error("{} not found".format(filename))
            return None


    def addVirtualMachine(self, properties):
        logger = logging.getLogger()
        if properties['nic'] is not None:
            if (len(properties['nic']) != len(properties['ip'])):
                logger.critical("The number of --ip must be equal to --nic")
                raise Exception

            if (len(properties['nic']) != len(properties['cidr'])):
                logger.critical("The number of --cidr must be equal to --nic")
                raise Exception

            for addr in properties['ip']:
                try:
                    socket.inet_aton(addr)
                    # legal
                except socket.error:
                    logger.critical("{} is not a valid IP address".format(addr))
                    raise Exception

        vm = TerrascriptVSphereVM(
            properties['name'],
            properties['guestid'],
            properties['cpu'],
            properties['ram'],
            properties['folder'])
        
        vm.setProvider(
            properties['esxhost'],
            properties['esxuser'],
            properties['esxiPassword'])
        
        vm.setDatacenter(properties['datacenter'])
        vm.setDatastore(properties['datastore'])
        vm.setResourcePool(properties['pool'])
        vm.setTemplate(properties['template'])
        vm.setTimezone(properties['timezone'])
        vm.setDomain(properties['domain'])
        vm.setGateway(properties['gateway'])
        for dns in properties['dns']:
            vm.addDns(dns)
        
        if properties['disk'] is not None:
            for idx, size in enumerate(properties['disk']):
                vm.addDisk(size)

        if properties['nic'] is not None:
            for idx, nic in enumerate(properties['nic']):
                vm.addNetworkInterface(nic, properties['ip'][idx], properties['cidr'][idx])

        self.VmResources[properties['name']] = {
            "script": "{}.tf.json".format(properties['name']),
            "properties": properties,
            "terrascript": vm }


    def createTerraformConfigurationFiles(self, name):
        logger = logging.getLogger()
        logger.info("Create Terraform script '{}'".format(self.VmResources[name]['script']))
        self.VmResources[name]['terrascript'].saveConfiguration(self.VmResources[name]['script'])


    def cleanTerraformConfigurationFiles(self, name):
        logger = logging.getLogger()
        logger.info("Clean terraform configuration file {}".format(self.VmResources[name]['script']))
        os.unlink(self.VmResources[name]['script'])

    
    def isVmExistsInStateFile(self, name):
        if self.tfstate:
            try:
                for module in self.tfstate['modules']:
                    if module['resources']['vsphere_virtual_machine.vm']['primary']['attributes']['name'] == name:
                        return True
            except KeyError:
                pass
        return False
    

    def tfInit(self):
        logger = logging.getLogger()
        logger.info("Init Terraform")
        return_code, stdout, stderr = self.terraform.init(
            input=False,
            no_color=IsFlagged)


    def createPlan(self, name):
        logger = logging.getLogger()
        planFile = "{}.plan".format(name)
        logger.info("Create Terraform plan '{}'".format(planFile))
        return_code, stdout, stderr = self.terraform.plan(
            out=planFile,
            input=False,
            no_color=IsFlagged)
        
        logger.debug(stdout)

        if return_code == 0:
            logger.warning("Nothing to create. Exit")
            exit(0)
    
        if return_code != 2:
            logger.error("Return Code: {}".format(return_code))
            logger.error(stderr)
            raise Exception
        
        self.VmResources[name]['planfile'] = planFile
    
    
    def deletePlan(self, name):
        logger = logging.getLogger()
        logger.debug("Remove file ''".format(self.VmResources[name]['planfile']))
        os.unlink(self.VmResources[name]['planfile'])
        del self.VmResources[name]['planfile']


    def applyPlan(self, name):
        logger = logging.getLogger()
        planFile = self.VmResources[name]['planfile']
        logger.info("Apply terraform plan '{}'".format(planFile))
        return_code, stdout, stderr = self.terraform.apply(
            planFile,
            input=False,
            no_color=IsFlagged)
        
        logger.debug(stdout)

        if return_code != 0:
            logger.error("Return Code: {}".format(return_code))
            logger.error(stderr)
            raise Exception
        logger.info("Virtual Machine created")


    def destroyResource(self, name):
        logger = logging.getLogger()
        logger.info("Destroy terraform Resource")
        return_code, stdout, stderr = self.terraform.destroy(
            input=False)
        logger.debug(stdout)

        if return_code != 0:
            logger.error("Return Code: {}".format(return_code))
            logger.error(stderr)
            raise Exception


    def importResource(self, name):
        logger = logging.getLogger
        logger.info("Import Ressource from vSphere")
        vmProperties = self.VmResources[name]['properties']
        self.terraform.import_cmd(
            "vsphere_virtual_machine.vm",
            "/{}/vm/{}/{}".format(
                vmProperties['datacenter'],
                vmProperties['folder'],
                vmProperties['name']))

  
    def createVM(self, name):
        self.createTerraformConfigurationFiles(name)
        self.tfInit()
        self.createPlan(name)
        self.applyPlan(name)
        self.deletePlan(name)
        self.cleanTerraformConfigurationFiles(name)


    def destroyVM(self,name):
        self.createTerraformConfigurationFiles(name)
        self.tfInit()
        if not self.isVmExistsInStateFile(name):
            self.importResource(name)
        self.destroyResource(name)
        self.cleanTerraformConfigurationFiles(name)



logging.basicConfig(format='[%(asctime)s] %(levelname)-5s: %(message)s',level=logging.INFO)

####################
# Main program
####################
if __name__ == '__main__':
    logger = logging.getLogger(__name__)
    

    args = argparse.ArgumentParser(
        prog='terraform-vm',
        description="Manage vSphere Virtual Machines",
        epilog="Environment variable ESXPASS is required to connect to vSphere{}/!\ When you want to destroy a VM, tfstate file is not required".format(linesep))
    args.add_argument('--action', choices=['create', 'destroy'],
                      required=True,
                      help='Action to Execute against vSphere')
    args.add_argument('--datacenter', action='store',
                      required=True,
                      help='ESXi Datacenter')
    args.add_argument('--datastore', action='store',
                      required=True,
                      help='ESXi Datastore')
    args.add_argument('--pool', action='store',
                      required=True,
                      help='ESXi Resource Pool')
    args.add_argument('--folder', action='store',
                      required=True,
                      help='ESXi VM Folder')
    args.add_argument('--template', action='store',
                      required=True,
                      help='Template Name')
    args.add_argument('--guestid', action='store',
                      required=True,
                      help='Guest ID')
    args.add_argument('--name', action='store',
                      required=True,
                      help='Virtual Machine Name')
    args.add_argument('--nic', action='append',
                      help='Network Interface. Repeat option for several NICs')
    args.add_argument('--ip', action='append',
                      help='NIC IP address. Repeat option for several NICs')
    args.add_argument('--cidr', action='append',
                      help='NIC CIDR. Repeat option for several NICs')
    args.add_argument('--gateway', action='store',
                      help='Default gateway')
    args.add_argument('--cpu', action='store',
                      required=True,
                      help='CPUs')
    args.add_argument('--ram', action='store',
                      required=True,
                      help='Memory')
    args.add_argument('--disk', action='append',
                      help='Additionnal disk in GB. Repeat option for several disks')
    args.add_argument('--dns', action='append',
                      help='DNS server')
    args.add_argument('--esxhost', action='store',
                      required=True,
                      help='ESXi host')
    args.add_argument('--esxuser', action='store',
                      required=True,
                      help='ESXi Username')
    args.add_argument('--esxpassvar', action='store',
                      required=True,
                      help='ESXi variable that contain password')                      
    args.add_argument('--domain', action='store',
                      required=True,
                      help='DNS domain')
    args.add_argument('--timezone', action='store',
                      required=True,
                      help='TimeZone')
    args.add_argument('-debug', action='store_true',
                      help='Verbose Output')

    arguments = vars(args.parse_args())
    
    if arguments['debug']:
        logger.setLevel(logging.DEBUG)
        logger.debug("DEBUG logging is active")

    logger.debug(environ)
    vmProperties = dict(arguments)
    vmProperties['esxiPassword'] = environ[arguments['esxpassvar']]
    del vmProperties['action']
    del vmProperties['debug']
    del vmProperties['esxpassvar']

    tvm = TerraformVM()
    tvm.addVirtualMachine(vmProperties)
    if arguments['action'] == 'create':
        tvm.createVM(arguments['name'])
    elif arguments['action'] == 'destroy':
        tvm.destroyVM(arguments['name'])

    exit(0)
